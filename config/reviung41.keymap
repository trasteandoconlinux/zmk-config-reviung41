/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define SYMBOL  1
#define NUMBER  2bfescf
#define MOVE    3
#define ADJUST  4


/ {

/* inicio insert*/


    combos {
    	   compatible = "zmk,combos";
	   combo_capsword {
	   		  timeout-ms = <50>;
          		  key-positions = <25 37>;
           		  bindings = <&caps_word>;
			  layers = <ALPHAS>;
           };
	   combo_capsword2 {
	   		   timeout-ms = <50>;
          		   key-positions = <30 42>;
           		   bindings = <&caps_word>;
			   layers = <ALPHAS>;
           };
	   combo_home {
	   	      timeout-ms = <50>;
          	      key-positions = <38 39>;
           	      bindings = <&kp HOME>;
           };
	   combo_end {
	   	     timeout-ms = <50>;
          	     key-positions = <40 41>;
           	     bindings = <&kp END>;
           };

    };

    

/* fin insert */








 macros {
        lower_layer: lower_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 1>,
                <&macro_tap>,
                <&rgb_ug RGB_ON &rgb_ug RGB_COLOR_HSB(240,100,100)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 1>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF>;

            label = "LOWER_LAYER";
        };

        raise_layer: raise_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_ON &rgb_ug RGB_COLOR_HSB(0,100,100)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 2>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF>;

            label = "RAISE_LAYER";
        };

        adjust_layer: adjust_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 4>,
                <&macro_tap>,
                <&rgb_ug RGB_ON &rgb_ug RGB_COLOR_HSB(285,100,80)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF>;

            label = "ADJUST_LAYER";
        };

        move_layer: move_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&tog 3 &rgb_ug RGB_ON &rgb_ug RGB_COLOR_HSB(0,0,100)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 3>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF>;

            label = "MOVE_LAYER";
        };

       /* inicio insert*/
rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

     	mb1:mouse_button1 {
	    label = "MB1";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    bindings = <&macro_press &kp F21>, <&macro_pause_for_release>, <&macro_release &kp F21>;
	};
	mb2:mouse_button2 {
	    label = "MB2";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    bindings = <&macro_press &kp F22>, <&macro_pause_for_release>, <&macro_release &kp F22>;
	};
	mb3:mouse_button3 {
            label = "MB3";
	    compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
	    bindings = <&macro_press &kp F23>, <&macro_pause_for_release>, <&macro_release &kp F23>;
	};

	pair: pair {
	      label = "PAIR";
	      compatible = "zmk,behavior-macro-two-param";
              #binding-cells = <2>; // Must be 2
	      bindings = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>, <&macro_param_2to1>, <&kp MACRO_PLACEHOLDER>, <&just_left>;
	};

	braces: braces {
		label = "BRACES";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings = <&pair LBKT RBKT>;
	};
	squotes: single_quotes {
		 label = "SQUOTES";
		 compatible = "zmk,behavior-macro";
		 #binding-cells = <0>;
		 bindings = <&pair SQT SQT>;
	};
	dquotes: double_quotes {
		 label = "DQUOTES";
		 compatible = "zmk,behavior-macro";
		 #binding-cells = <0>;
		 bindings = <&pair DQT DQT>;
	};
	abrackets: angle_brackets {
		   label = "ABRACKETS";
		   compatible = "zmk,behavior-macro";
		   #binding-cells = <0>;
		   bindings = <&pair LT GT>;
	};
	parens: parens {
		label = "PARENS";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings = <&pair LPAR RPAR>;
	};
       /* fin insert*/

    };
    /* === 2. Keymap === */

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &move_layer   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &bspc_del
   &mt LCTRL TAB  &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp RET
   &td_shift_caps &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &td_shift_caps_word 
                        &kp LALT &raise_layer &kp SPACE &lower_layer &kp RALT
                        >;
                };

                lower_layer {
                        bindings = <
   &kp TILDE  &kp EXCL  &kp AT      &kp HASH &kp DLLR &kp PRCNT      &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR            &kp RPAR  &bspc_del
   &kp TAB    &none     &none       &none    &none    &none          &kp LBRC   &kp RBRC  &kp BSLH   &kp SINGLE_QUOTE    &kp SEMI  &none 
   &trans     &none     &none       &none    &none    &none          &kp LS(MINUS)  &kp EQUAL &kp COMMA  &kp DOT             &kp SLASH &trans   
                                 &adjust_layer   &trans              &trans        &trans       &trans
                        >;
                };

                raise_layer {
                        bindings = <
   &trans  &kp N1    &kp N2    &kp N3    &kp N4    &kp N5        &kp N6    &kp N7    &kp N8      &kp N9  &kp N0    &bspc_del
   &kp TAB &kp F1    &kp F2    &kp F3    &kp F4    &kp F5        &kp F6    &kp F7    &kp F8      &kp F9  &kp F10   &none
   &trans  &kp ESC   &kp LGUI  &kp RALT  &kp CLCK  &kp DQT       &kp MINUS  &kp EQUAL &kp COMMA  &kp DOT &kp SLASH &trans 
                                 &adjust_layer      &trans       &trans        &trans       &trans
                        >;
                };

                move_layer {
                        bindings = <
   &kp TAB    &rgb_ug RGB_TOG   &rgb_ug RGB_COLOR_HSB(128,100,100)  &none  &none   &none  &none            &kp HOME          &none             &kp END               &kp PAGE_UP          &bspc_del
   &kp LCTRL   &none             &none    &none   &none   &none                             &kp LEFT_ARROW  &kp DOWN_ARROW     &kp UP_ARROW      &kp RIGHT_ARROW       &kp PAGE_DOWN         &kp ENTER
   &kp LSHFT  &none             &none    &none   &none   &none                               &none            &kp F5            &none             &none                 &none                 &none
                                 &trans      &trans       &trans        &trans       &trans
                        >;
                };
                adjust_layer {
                        bindings = <
   &rgb_ug RGB_BRI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_EFF &none &rgb_ug RGB_TOG    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
   &rgb_ug RGB_BRD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_EFR &none &none              &none        &none        &none        &none        &none        &none
   &none           &none           &none           &none           &none &none              &sys_reset       &none        &none        &none        &none        &none
                                                              &trans      &trans       &trans        &trans       &trans
                        >;
                };
        };

    behaviors {
        td_shift_caps: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LSHFT>, <&kp CAPS>;
        };
        td_shift_caps_word: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        /* inicio insert*/
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

	hml: homerow_mod_left {
	     compatible = "zmk,behavior-hold-tap";
	     label = "HRM_LEFT";
	     flavor = "balanced";
	     tapping-term-ms = <280>;
	     quick-tap-ms = <175>;
	     global-quick-tap;
	     #binding-cells = <2>;
	     bindings = <&kp>, <&kp>;
	     hold-trigger-key-positions = <KEYS_R THUMBS>;
	     hold-trigger-on-release;
	};

	hmr: homerow_mod_right {
	     compatible = "zmk,behavior-hold-tap";
	     label = "HRM_RIGHT";
	     flavor = "balanced";
	     tapping-term-ms = <280>;
	     quick-tap-ms = <175>;
	     global-quick-tap;
	     #binding-cells = <2>;
	     bindings = <&kp>, <&kp>;
	     hold-trigger-key-positions = <KEYS_L THUMBS>;
	     hold-trigger-on-release;
	};

	just_left: left_no_mods {
	      compatible = "zmk,behavior-mod-morph";
	      label = "JUST_LEFT";
	      #binding-cells = <0>;
	      bindings = <&kp LEFT>, <&kp LEFT>;
	      mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
	      keep-mods = <0>;
	};
	mega: mega_pairs {
 	      compatible = "zmk,behavior-mod-morph";
	      label = "MEGA_PAIRS";
	      #binding-cells = <0>;
	      bindings = <&mega_abrq>, <&parens>;
	      mods = <(MOD_LALT|MOD_RALT)>;
	};
	mega_abrq: mega_abrq {
 	      compatible = "zmk,behavior-mod-morph";
	      label = "MEGA_ABRQ";
	      #binding-cells = <0>;
	      bindings = <&mega_brq>, <&abrackets>;
	      mods = <(MOD_LGUI|MOD_RGUI)>;
	};
	mega_brq: mega_brq {
 	      compatible = "zmk,behavior-mod-morph";
	      label = "MEGA_BRQ";
	      #binding-cells = <0>;
	      bindings = <&braces>, <&mega_quotes>;
	      mods = <(MOD_LCTL|MOD_RCTL)>;
	};
	mega_quotes: mega_quotes {
		 compatible = "zmk,behavior-mod-morph";
		 label = "MEGA_QUOTES";
		 #binding-cells = <0>;
		 bindings = <&dquotes>, <&squotes>;
		 mods = <(MOD_LSFT|MOD_RSFT)>;
	};
        /* inicio insert*/ 

        /* inicio insert2*/
        magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };
        /* fin insert2*/








    };

};
/****************

 HSV_AZURE       132, 102, 255
# HSV_BLACK         0,   0,   0
# HSV_BLUE        170, 255, 255
# HSV_CHARTREUSE   64, 255, 255
# HSV_CORAL        11, 176, 255
# HSV_CYAN        128, 255, 255
# HSV_GOLD         36, 255, 255
# HSV_GOLDENROD    30, 218, 218
# HSV_GREEN        85, 255, 255
# HSV_MAGENTA     213, 255, 255
# HSV_ORANGE       28, 255, 255
# HSV_PINK        234, 128, 255
# HSV_PURPLE      191, 255, 255
# HSV_RED           0, 255, 255
# HSV_SPRINGGREEN 106, 255, 255
# HSV_TEAL        128, 255, 128
# HSV_TURQUOISE   123,  90, 112
# HSV_WHITE         0,   0, 255
# HSV_YELLOW       43, 255, 255
# HSV_OFF         HSV_BLACK

**********************/


